var documenterSearchIndex = {"docs":
[{"location":"#SimSpin.jl-Documentation-1","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"","category":"section"},{"location":"#Usage-1","page":"SimSpin.jl Documentation","title":"Usage","text":"","category":"section"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"For the installation procedure of the SimSpin package please follow the installation instructions on the package's README.","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"Once installed, a simple procedure of four steps is required to take an observation and generate a datacube:","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"Construct a Telescope object. This specifies the field of view to be used, the aperture shape, etc. In this example we will use the default SAMI telescope constructor. See Telescope Constructors for other default and customisable constructors.\n> telescope = SimSpin.SAMI()\nRead in the simulation's particle data\n> sim_data = SimSpin.sim_data(\"path/to/SimSpin/example/SimSpin_example.hdf5\")\nConstruct an environment in which the observation is taken.","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"This specifies the redshift of the galaxy, its inclination, the virial radius and the seeing conditions respectively. We will set redshift to be 0.05, inclination to be 70 degrees, virial radius to be 200 kpc and use no blurring. See Environment Constructor and Blur Constructors for more details.","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"        > environment = SimSpin.Environment(0.05, 70, 200)\n    ```\n\n4.  Build the datacube as a combination of the galaxy particle data, a telescope and an environment. This function also returns a summary of the observational properties used.\n\n    ```\n        > datacube, observe = SimSpin.build_datacube(sim_data, telescope, environment)\n    ```\n\n5.  Export the datacube to a FITS file for viewing. See [Data Export](@ref) for more details\n\n        ```\n            > SimSpin.sim_FITS(data_cube, observe, \"SimSpin_Example_Observation.fits\")\n        ```\n## Functions","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"@docs builddatacube fluxgrid ifucube obsdataprep simdata sim_FITS","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"## Constructors\n### Telescope Constructors\n\nAn `IFU` object denotes all the parameters required to make a mock observation.\nAny generic IFU can be made using the `IFU()` function.\nDefault constructors can also be used to emulate famous IFU survey instruments.\nCurrently `SAMI`, `MaNGA`, `CALIFA` and `Hector` are supported.","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"@docs IFU SAMI MaNGA CALIFA Hector","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"\n### Environment Constructor","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"@docs Environment","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"\n### Blur Constructors","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"@docs Gaussianblur Moffatblur","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"\n### Dark Matter Constructors","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"@docs Hernquist NFW","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"\n## Multi-Threading\n\nThe SimSpin package has multi-threading enabled in some critical functions.\nTo use SimSpin with `x` threads (where x is the integer number of threads desired) you must call\n","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"export JULIANUMTHREADS=x","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"in a Terminal before the Julia REPL is started. This environment variable defaults to 1 if not set before the session has begun.\n\n## Data Input Format\n\nHere we outline the expected file format accepted by SimSpin.  If you would like to generate this file automatically, a short Python function has been written that uses the [pynbody](https://github.com/pynbody/pynbody) package to read in various simulation data types and generate a SimSpin compatible HDF5 file. See [create_SimSpinFile](https://github.com/kateharborne/create_SimSpinFile).\n\nIf you would rather generate the SimSpin file independently, the expected file format is outlined below.\n","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"SimSpin_example.hdf5","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"/PartType0           # Each particle type included in the simulation has its own group./PartType0/Mass     # Each group then has a series of data sets assocaited, /PartType0/vx       #   including the position, velocity and Mass of each particle. /PartType0/vy /PartType0/vz /PartType0/x /PartType0/y /PartType0/z","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"/PartType1...","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"We use the same PartType definition as Gadget: PartTypeX where 0 - gas, 1 - dark matter, 2 - disc, 3 - bulge, 4 - stars. For PartType0-3, each PartType group contains the same data sets as above. If the simulation contains stars, the Age and Metallicity information for each particle is also included:\n","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"SimSpin_example.hdf5/PartType4/PartType4/Age /PartType4/Mass /PartType4/Metallicity /PartType4/vx         /PartType4/vy /PartType4/vz /PartType4/x /PartType4/y /PartType4/z","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"If the file is set up in this way, the simulation data can easily be read into the SimSpin package.\n\n### References\n\nA. Pontzen, R Roskar, G. Stinson and R. Woods, (2013), \"pynbody: N-Body/SPH analysis for python\",  Astrophysics Source Code Library, record ascl:1305.002\n\n## Data Export\n\nCurrently only FITS file exports are supported.\n\n### FITS Export","category":"page"},{"location":"#","page":"SimSpin.jl Documentation","title":"SimSpin.jl Documentation","text":"@docs sim_FITS ```","category":"page"}]
}
